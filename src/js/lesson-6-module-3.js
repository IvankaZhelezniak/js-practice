/*
Сегодня кусочек современного синтаксиса который кое где полезен. Нам надо это рассмотреть
посмотреть реальный пример. А потом узнать где это использовать.

Я буду юзать это в будущих занятиях, вы будете понимать что это такое и заодно набьете руку

Spread и rest в домашках не будет, а деструктуризацыя полезна.


         НОВЫЙ СИНТАКСИС,  недавно появился, помоему в 2016 или 2017 году (помню ES7 это).

1-вое:  ОПЕРАЦИЯ Spread  или распыление, это когда у вас есть вот такая вот колекцыя
элементов, допустим  массив или обьект [1, 2, 3, 4] и необходимо взять этот массив или
обьект и буквально распылить его элементы в другую колекцию. Тоесть если у вас есть мешок
1 конфет и мешок других конфет и мы берем первый и высипаем во второй, тоесть буквально
по одному элементику поставить в лругую коллекцию.

Эта ОПЕРАЦИЯ Spread распыление используется в 3-ох ситуациях:

1)это буквально когда вы вызываете функцию и вы хотите какую-то колекцыю передать в функцыю
отдельными аргументами.
Пример, вот у нас есть какие-то температуры const temperatures = [18, 14, 12, 21, 17, 29];
Помните есть этот Math.min  найти самый маленький элемент масива и фором потом перебирать,
вот так пишем в консоль console.log(Math.min(1, -20, 3, -4)); и оно нам выведет -20 самое
маленькое. Все класно, НО что
ЕСЛИ сюда в Math.min(1, -20, 3, -4) передать массив [18, 14, 12, 21, 17, 29]???

Math.min ожыдает что это будет просто набор аргументов, не один массив а набор. Если я сюда
передам массив console.log(Math.min([18, 14, 12, 21, 17, 29]));  то естественено он ничего
не сделает и он не ожидает что прийдет массив, он просто посмотрит что это, но это один
аргумент попробует его сравнить и это даже не число и все сломалась.

*/

// const temperatures = [18, 14, 12, 21, 17, 29];
// console.log(Math.min(1, -20, 3, -4));

// console.log(Math.min([18, 14, 12, 21, 17, 29]));// NaN
// const min = Math.min(temperatures); // NaN


/*  Как сделать так что-бы взять этот массив [18, 14, 12, 21, 17, 29]  и передать функции
по элементно. Мы просто ставим перед колекцией три точки ...
console.log(Math.min(...[18, 14, 12, 21, 17, 29]));  - это вот и есть операция распыления.
Тоесть у нас идет сущность колекция массив или обьект [18, 14, 12, 21, 17, 29] и потом
три точки перед ним это называется операцыя распыления.
Это console.log(Math.min(...[18, 14, 12, 21, 17, 29]));   тоже самое что это
Math.min(18, 14, 12, 21, 17, 29)  -  это делает ОПЕРАЦИЯ Spread она распыляет. Именно во
время функции можете взять какую то колекцыю перед ней три точки поставить и она эту
колекцыю не одним аргументом передаст а распакует её и сколько в ней элементов столько
аргументов в функцию пойдет.

Соответственно на выходе мы получаем самое маленькое число 12

Это можна делать с массивом с обьектом
*/

// const temperatures = [18, 14, 12, 21, 17, 29];
// console.log(Math.min(...[18, 14, 12, 21, 17, 29])); 

// Math.min(18, 14, 12, 21, 17, 29)



/* Это можна делать с массивом с обьектом, можно распылять массивы к примеру у вас есть
массив тех же самых температ const temperatures = [18, 14, 12, 21, 17, 29];  и вам нужно
поставить нвые температуры там

Причем ЗАДАЧА не взять этот массив температ и запушыть в него новый элемент, а именно
сделать новый массив в котором должен быть сначала все эти элементы оригинальных температур
а потом ещё один элемент.

Раньше мы бы сделали так: есть такой метод concat, мы бы взяли нашы температуры вызвали на
них concat и конкату необходимо передать сюда массив элеменетов (что делает concat - он
создает пустой массив, после чего берет вот этот вот на котором вызвали массив, помещает
в пустой массив все вот эти элеметы 18, 14, 12, 21, 17, 29 сначала , а потом все последующие
аргументы можно передать еще массивы там [1,2,3] допустим значения. И concat добавляет єти
значения тоже сюда вот так вот [18, 14, 12, 21, 17, 29, 1, 2, 3] ) - вспомнили что делает
concat. Тоесть он создает новый массив и просто назад добавляет эту ерунду.

const temperatures = [18, 14, 12, 21, 17, 29];
const nextTemps = temperatures.concat([1, 2, 3]);
console.log(nextTemps);

nextTemps - следующий темп
 */


// const temperatures = [18, 14, 12, 21, 17, 29];
// const nextTemps = temperatures.concat([1, 2, 3]);  /* будет такое на выходе 
//                                                       [18, 14, 12, 21, 17, 29, 1, 2, 3] */
// console.log(nextTemps);



/* ТОЖЕ самое позволяет нам сделать операция распыления, тоесть вместо того что-бы делать
concat (тоесть это просто замена более старого синтаксиса на более новый).
Так вот вместо вот этой записи const nextTemps = temperatures.concat([1, 2, 3]);   можем
сделать такую const nextTemps = [...temperatures, 1, 2, 3];
мы делаем новый массив обьявляем литерал новый, потом в него сначала распыляем старые
температуры и добавляем нашы которые мы хотим и получается тоже самое.
Просто альтернативный синтаксис более современный, что-бы не писать вызовы методов и
незаморачиватся
 */

// const temperatures = [18, 14, 12, 21, 17, 29];

// const nextTemps = [...temperatures, 1, 2, 3];
// console.log(nextTemps);



/* Допустим мы пишем приложение которое работает с температурами, и у нас есть температуры
за прошлую неделю lastWeekTemps каккая то 1, 2, 3.  Потом у нас есть текущие температуры
[6, 1, 8] у целсиях.  И потом у нас есть температуры следующих недель и тоже какой-то массив
температ
ВНИМАНИЕ: распилять можно только одинаковые типы колекцый, тоесть массив в массив, обьект
в обьект и нельзя обьект распылить в массив или массив распылить в обьект это не логично,
не имеет смысла.

lastWeekTemps  -  температура прошлой недели
currentTemps  - текущая температура
nextWeekTemps  -  температуры следующих недель
 */

// const lastWeekTemps = [1, 2, 3];
// const currentTemps = [6, 1, 8];
// const nextWeekTemps = []